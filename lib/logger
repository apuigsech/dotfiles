[[ $LOGGER_INCLUDED ]] && return
LOGGER_INCLUDED=true

# Logger configuration
DOTFILES_LOG_DIR="${HOME}/.dotfiles/logs"
DOTFILES_LOG_FILE="${DOTFILES_LOG_DIR}/install-$(date +%Y%m%d-%H%M%S).log"

# Create log directory if it doesn't exist
mkdir -p "$DOTFILES_LOG_DIR"

# Log levels
LOG_LEVEL_DEBUG=0
LOG_LEVEL_INFO=1
LOG_LEVEL_WARN=2
LOG_LEVEL_ERROR=3

# Default log level (can be overridden by environment variable)
DOTFILES_LOG_LEVEL=${DOTFILES_LOG_LEVEL:-$LOG_LEVEL_INFO}

# Color codes for terminal output
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Internal logging function
function _log() {
    local level=$1
    local level_name=$2
    local color=$3
    shift 3
    
    # Check if we should log this level
    if [[ $level -lt $DOTFILES_LOG_LEVEL ]]; then
        return 0
    fi
    
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
    local message="[$timestamp] [$level_name] $*"
    
    # Log to file (always, regardless of level)
    echo "$message" >> "$DOTFILES_LOG_FILE"
    
    # Log to console with color if supported
    if [[ -t 1 ]] && [[ "$TERM" != "dumb" ]]; then
        echo -e "${color}[$level_name]${NC} $*"
    else
        echo "[$level_name] $*"
    fi
}

# Public logging functions
function log_debug() {
    _log $LOG_LEVEL_DEBUG "DEBUG" "$BLUE" "$@"
}

function log_info() {
    _log $LOG_LEVEL_INFO "INFO" "$GREEN" "$@"
}

function log_warn() {
    _log $LOG_LEVEL_WARN "WARN" "$YELLOW" "$@"
}

function log_error() {
    _log $LOG_LEVEL_ERROR "ERROR" "$RED" "$@"
}

# Convenience function for logging command execution
function log_cmd() {
    local desc=$1
    shift
    log_debug "Executing: $*"
    if "$@"; then
        log_debug "$desc: SUCCESS"
        return 0
    else
        local exit_code=$?
        log_error "$desc: FAILED (exit code: $exit_code)"
        return $exit_code
    fi
}

# Function to set log level
function set_log_level() {
    case "$1" in
        debug|DEBUG) DOTFILES_LOG_LEVEL=$LOG_LEVEL_DEBUG ;;
        info|INFO) DOTFILES_LOG_LEVEL=$LOG_LEVEL_INFO ;;
        warn|WARN) DOTFILES_LOG_LEVEL=$LOG_LEVEL_WARN ;;
        error|ERROR) DOTFILES_LOG_LEVEL=$LOG_LEVEL_ERROR ;;
        *) log_error "Invalid log level: $1" ;;
    esac
}

# Function to get current log file path
function get_log_file() {
    echo "$DOTFILES_LOG_FILE"
}

# Function to rotate old log files (keep last 10)
function rotate_logs() {
    if [[ -d "$DOTFILES_LOG_DIR" ]]; then
        local old_logs
        old_logs=$(find "$DOTFILES_LOG_DIR" -name "install-*.log" -type f | sort -r | tail -n +11)
        if [[ -n "$old_logs" ]]; then
            echo "$old_logs" | xargs rm -f
        fi
    fi
}

# Initialize logging
log_info "Logger initialized - Log file: $DOTFILES_LOG_FILE"
rotate_logs 