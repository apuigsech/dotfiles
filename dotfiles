#!/usr/bin/env bash

# Dotfiles Management Command
# Provides a unified interface for managing dotfiles installation, bootstrapping, and status

set -e

# Get script directory and change to it
BASE_DIR=$(dirname $(realpath $0))
cd "${BASE_DIR}"

# Source enhanced libraries
source lib/logger
source lib/errors
source lib/progress
source lib/utils
source lib/dotbot
source lib/brew
source lib/uninstall

# Configuration
DOTFILES_PLUGINS=(brew shell zsh direnv hammerspoon configs bluereset renicer cursor)
DOTBOT_DIR="dotbot"
CONFIG="install.conf.yaml"

# Version information
VERSION="1.0.0"

# Show help message
function show_help() {
    cat << EOF
Dotfiles Management Tool v${VERSION}

Usage: ./dotfiles <command> [options]

Commands:
    init        Initialize basic dotfiles configuration using dotbot
    install     Install specific plugins or all plugins with --all
    uninstall   Remove specific plugins or all plugins with --all
    status      Check installation status of plugins and file links
    help        Show this help message

Options:
    --debug     Enable debug mode with verbose output
    --strict    Enable strict mode (exit on any error)
    --fail-fast Exit immediately on first error
    --verbose   Enable verbose logging
    --quiet     Only show errors
    --help      Show help for specific command

Examples:
    ./dotfiles init                     # Basic dotfiles initialization
    ./dotfiles install --all            # Install all plugins (equivalent to old bootstrap)
    ./dotfiles install brew zsh         # Install specific plugins
    ./dotfiles uninstall brew           # Remove specific plugin
    ./dotfiles uninstall --all          # Remove all plugins
    ./dotfiles status                   # Check current status
    ./dotfiles help install             # Show help for install command

Environment Variables:
    DOTFILES_DEBUG      Enable debug mode (true/false)
    DOTFILES_STRICT     Enable strict mode (true/false)
    DOTFILES_FAIL_FAST  Enable fail-fast mode (true/false)
    DOTFILES_LOG_LEVEL  Set log level (debug/info/warn/error)

EOF
}

# Show command-specific help
function show_command_help() {
    local command=$1

    case $command in
        init)
            cat << EOF
dotfiles init - Initialize basic dotfiles configuration

Usage: ./dotfiles init [options]

This command performs a basic dotfiles initialization using dotbot:
- Updates git submodules
- Links essential configuration files
- Runs basic setup tasks

Options:
    --help      Show this help message
    --debug     Enable debug output
    --verbose   Enable verbose logging
    --quiet     Only show errors

Examples:
    ./dotfiles init
    ./dotfiles init --verbose

EOF
            ;;
        install)
            cat << EOF
dotfiles install - Install specific plugins or all plugins

Usage: ./dotfiles install [plugin1] [plugin2] ... [options]
       ./dotfiles install --all [options]

This command installs dotfiles plugins:
- With --all: Installs all plugins (equivalent to old bootstrap command)
- With plugin names: Installs only specified plugins
- Runs setup.sh scripts where available
- Processes dotbot configurations
- Provides comprehensive error handling and logging

Available plugins: ${DOTFILES_PLUGINS[*]}

Options:
    --all       Install all plugins
    --help      Show this help message
    --debug     Enable debug mode with verbose output
    --strict    Enable strict mode (exit on any error)
    --fail-fast Exit immediately on first error
    --verbose   Enable verbose logging
    --quiet     Only show errors

Examples:
    ./dotfiles install --all            # Install all plugins
    ./dotfiles install brew zsh         # Install specific plugins
    ./dotfiles install --all --debug    # Install all with debug output

EOF
            ;;
        uninstall)
            cat << EOF
dotfiles uninstall - Remove specific plugins or all plugins

Usage: ./dotfiles uninstall [plugin1] [plugin2] ... [options]
       ./dotfiles uninstall --all [options]

This command removes dotfiles plugins:
- With --all: Removes all plugins
- With plugin names: Removes only specified plugins
- Runs uninstall.sh scripts where available
- Automatically reverses dotbot configurations
- Provides comprehensive error handling and logging

Available plugins: ${DOTFILES_PLUGINS[*]}

Options:
    --all       Remove all plugins
    --dry-run   Preview changes without making them (also --preview)
    --help      Show this help message
    --debug     Enable debug mode with verbose output
    --strict    Enable strict mode (exit on any error)
    --fail-fast Exit immediately on first error
    --verbose   Enable verbose logging
    --quiet     Only show errors

Examples:
    ./dotfiles uninstall --all          # Remove all plugins
    ./dotfiles uninstall brew zsh       # Remove specific plugins
    ./dotfiles uninstall --all --dry-run # Preview what would be removed
    ./dotfiles uninstall --all --debug  # Remove all with debug output

EOF
            ;;
        status)
            cat << EOF
dotfiles status - Check installation status

Usage: ./dotfiles status [options]

This command checks the current installation status:
- Verifies plugin installation status
- Checks file link integrity
- Reports missing dependencies
- Shows configuration health

Options:
    --help      Show this help message
    --verbose   Show detailed status information
    --quiet     Only show summary

Examples:
    ./dotfiles status
    ./dotfiles status --verbose

EOF
            ;;
        *)
            echo "Unknown command: $command"
            echo "Use './dotfiles help' for available commands"
            exit 1
            ;;
    esac
}

# Parse global arguments
function parse_global_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug)
                enable_debug
                shift
                ;;
            --strict)
                enable_strict
                shift
                ;;
            --fail-fast)
                enable_fail_fast
                shift
                ;;
            --verbose)
                set_log_level debug
                shift
                ;;
            --quiet)
                set_log_level error
                shift
                ;;
            --help)
                return 0
                ;;
            *)
                # Return remaining args for command-specific parsing
                return 0
                ;;
        esac
    done
}

# Init command - Basic dotfiles initialization (formerly install)
function cmd_init() {
    local args=("$@")

    # Parse command-specific arguments
    local show_help=false
    for arg in "${args[@]}"; do
        case $arg in
            --help)
                show_help=true
                ;;
        esac
    done

    if [[ "$show_help" == true ]]; then
        show_command_help init
        return 0
    fi

    log_info "Starting basic dotfiles initialization"

    # Update git submodules
    log_info "Updating git submodules..."
    if ! git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive; then
        log_error "Failed to sync git submodules"
        return 1
    fi

    if ! git submodule update --init --recursive "${DOTBOT_DIR}"; then
        log_error "Failed to update git submodules"
        return 1
    fi

    # Run dotbot with install configuration
    log_info "Running dotbot configuration..."
    if ! "${DOTBOT_BIN}" -d "${BASE_DIR}" -c "${CONFIG}" "${args[@]}"; then
        log_error "Dotbot configuration failed"
        return 1
    fi

    log_info "Basic dotfiles initialization completed successfully"
    return 0
}

# Install command - Plugin installation (formerly bootstrap)
function cmd_install() {
    local args=("$@")
    local install_all=false
    local plugins_to_install=()
    local show_help=false

    # Parse command-specific arguments
    for arg in "${args[@]}"; do
        case "$arg" in
            --all)
                install_all=true
                ;;
            --help)
                show_help=true
                ;;
            --debug|--strict|--fail-fast|--verbose|--quiet)
                # Skip global options (already parsed)
                ;;
            *)
                # Check if it's a valid plugin name
                local plugin="$arg"
                local is_valid=false
                for valid_plugin in "${DOTFILES_PLUGINS[@]}"; do
                    if [[ "$plugin" == "$valid_plugin" ]]; then
                        is_valid=true
                        break
                    fi
                done

                if [[ "$is_valid" == true ]]; then
                    plugins_to_install+=("$plugin")
                else
                    log_error "Unknown plugin: $plugin"
                    echo "Available plugins: ${DOTFILES_PLUGINS[*]}"
                    return 1
                fi
                ;;
        esac
    done

    if [[ "$show_help" == true ]]; then
        show_command_help install
        return 0
    fi

    # Determine which plugins to install
    if [[ "$install_all" == true ]]; then
        plugins_to_install=("${DOTFILES_PLUGINS[@]}")
        log_info "Installing all plugins"
    elif [[ ${#plugins_to_install[@]} -eq 0 ]]; then
        log_error "No plugins specified. Use --all to install all plugins, or specify plugin names."
        echo "Available plugins: ${DOTFILES_PLUGINS[*]}"
        return 1
    else
        log_info "Installing specified plugins: ${plugins_to_install[*]}"
    fi

    log_info "Starting plugin installation"
    log_info "Base directory: $BASE_DIR"
    log_info "Plugins to install: ${plugins_to_install[*]}"

    # Validate environment
    if ! validate_environment; then
        log_error "Environment validation failed"
        return 1
    fi

    # Initialize progress tracking
    init_progress ${#plugins_to_install[@]}

    local failed_plugins=()

    # Process each plugin
    for plugin in "${plugins_to_install[@]}"; do
        if run_plugin "$plugin"; then
            log_info "✓ Plugin installed: $plugin"
        else
            log_error "✗ Plugin failed: $plugin"
            failed_plugins+=("$plugin")

            # Exit immediately if fail-fast is enabled
            if is_fail_fast; then
                log_error "Fail-fast mode enabled, stopping installation"
                break
            fi
        fi

        update_progress
    done

    finish_progress

    # Print summary
    print_progress_summary

    if [[ ${#failed_plugins[@]} -gt 0 ]]; then
        log_error "Failed plugins: ${failed_plugins[*]}"
        log_error "Check the log file for details: $(get_log_file)"
        generate_report
        return 1
    else
        log_info "All plugins installed successfully!"
        generate_report
        return 0
    fi
}

# Uninstall command - Remove plugins
function cmd_uninstall() {
    local args=("$@")
    local uninstall_all=false
    local plugins_to_uninstall=()
    local show_help=false

    # Parse command-specific arguments
    for arg in "${args[@]}"; do
        case "$arg" in
            --all)
                uninstall_all=true
                ;;
            --help)
                show_help=true
                ;;
            --dry-run|--preview)
                export DOTFILES_DRY_RUN=true
                ;;
            --debug|--strict|--fail-fast|--verbose|--quiet)
                # Skip global options (already parsed)
                ;;
            *)
                # Check if it's a valid plugin name
                local plugin="$arg"
                local is_valid=false
                for valid_plugin in "${DOTFILES_PLUGINS[@]}"; do
                    if [[ "$plugin" == "$valid_plugin" ]]; then
                        is_valid=true
                        break
                    fi
                done

                if [[ "$is_valid" == true ]]; then
                    plugins_to_uninstall+=("$plugin")
                else
                    log_error "Unknown plugin: $plugin"
                    echo "Available plugins: ${DOTFILES_PLUGINS[*]}"
                    return 1
                fi
                ;;
        esac
    done

    if [[ "$show_help" == true ]]; then
        show_command_help uninstall
        return 0
    fi

    # Determine which plugins to uninstall
    if [[ "$uninstall_all" == true ]]; then
        plugins_to_uninstall=("${DOTFILES_PLUGINS[@]}")
        log_info "Uninstalling all plugins"
    elif [[ ${#plugins_to_uninstall[@]} -eq 0 ]]; then
        log_error "No plugins specified. Use --all to uninstall all plugins, or specify plugin names."
        echo "Available plugins: ${DOTFILES_PLUGINS[*]}"
        return 1
    else
        log_info "Uninstalling specified plugins: ${plugins_to_uninstall[*]}"
    fi

    log_info "Starting plugin uninstallation"
    log_info "Base directory: $BASE_DIR"
    log_info "Plugins to uninstall: ${plugins_to_uninstall[*]}"

    # Initialize progress tracking
    init_progress ${#plugins_to_uninstall[@]}

    local failed_plugins=()

    # Process each plugin
    for plugin in "${plugins_to_uninstall[@]}"; do
        if uninstall_plugin "$plugin"; then
            log_info "✓ Plugin uninstalled: $plugin"
        else
            log_error "✗ Plugin uninstall failed: $plugin"
            failed_plugins+=("$plugin")

            # Exit immediately if fail-fast is enabled
            if is_fail_fast; then
                log_error "Fail-fast mode enabled, stopping uninstallation"
                break
            fi
        fi

        update_progress
    done

    finish_progress

    # Print summary
    print_progress_summary

    if [[ ${#failed_plugins[@]} -gt 0 ]]; then
        log_error "Failed to uninstall plugins: ${failed_plugins[*]}"
        log_error "Check the log file for details: $(get_log_file)"
        return 1
    else
        log_info "All plugins uninstalled successfully!"
        return 0
    fi
}

# Status command - Check installation status
function cmd_status() {
    local args=("$@")

    # Parse command-specific arguments
    local show_help=false
    local verbose=false
    for arg in "${args[@]}"; do
        case $arg in
            --help)
                show_help=true
                ;;
            --verbose)
                verbose=true
                ;;
        esac
    done

    if [[ "$show_help" == true ]]; then
        show_command_help status
        return 0
    fi

    echo -e "${BLUE}Dotfiles Installation Status${NC}"
    echo "=================================="

    # Check git repository status
    echo -e "\n${YELLOW}Repository Status:${NC}"
    if [[ -d "$BASE_DIR/.git" ]]; then
        echo -e "  ${GREEN}✓${NC} Git repository initialized"
        if [[ "$verbose" == true ]]; then
            echo "    Branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
            echo "    Remote: $(git remote get-url origin 2>/dev/null || echo 'none')"
        fi
    else
        echo -e "  ${RED}✗${NC} Not a git repository"
    fi

    # Check dotbot installation
    echo -e "\n${YELLOW}Dotbot Status:${NC}"
    if [[ -f "${DOTBOT_BIN}" ]]; then
        echo -e "  ${GREEN}✓${NC} Dotbot installed"
        if [[ "$verbose" == true ]]; then
            echo "    Path: ${DOTBOT_BIN}"
        fi
    else
        echo -e "  ${RED}✗${NC} Dotbot not found"
    fi

    # Check plugin status
    echo -e "\n${YELLOW}Plugin Status:${NC}"
    local installed_count=0
    local total_count=${#DOTFILES_PLUGINS[@]}

    for plugin in "${DOTFILES_PLUGINS[@]}"; do
        local plugin_dir="plugins/$plugin"
        local status_symbol=""
        local status_text=""

        if [[ -d "$plugin_dir" ]]; then
            # Check if plugin has configuration files
            local has_setup_sh=false
            local has_setup_dotbot=false

            [[ -f "$plugin_dir/setup.sh" ]] && has_setup_sh=true
            [[ -f "$plugin_dir/setup.dotbot" ]] && has_setup_dotbot=true

            if [[ "$has_setup_sh" == true || "$has_setup_dotbot" == true ]]; then
                status_symbol="${GREEN}✓${NC}"
                status_text="Available"
                installed_count=$((installed_count + 1))

                if [[ "$verbose" == true ]]; then
                    echo -e "  $status_symbol $plugin - $status_text"
                    [[ "$has_setup_sh" == true ]] && echo "    - Has setup.sh"
                    [[ "$has_setup_dotbot" == true ]] && echo "    - Has setup.dotbot"

                    # Check specific plugin status
                    check_plugin_status "$plugin" "$plugin_dir"
                else
                    echo -e "  $status_symbol $plugin"
                fi
            else
                status_symbol="${YELLOW}!${NC}"
                status_text="No setup files"
                echo -e "  $status_symbol $plugin - $status_text"
            fi
        else
            status_symbol="${RED}✗${NC}"
            status_text="Missing"
            echo -e "  $status_symbol $plugin - $status_text"
        fi
    done

    # Summary
    echo -e "\n${YELLOW}Summary:${NC}"
    echo "  Plugins available: $installed_count/$total_count"

    if [[ $installed_count -eq $total_count ]]; then
        echo -e "  ${GREEN}✓${NC} All plugins are available"
    else
        echo -e "  ${YELLOW}!${NC} Some plugins are missing or incomplete"
    fi

    return 0
}

# Helper function to check plugin-specific status
function check_plugin_status() {
    local plugin=$1
    local plugin_dir=$2

    # Plugin-specific status checks can be added here
    # For now, just check if plugin directory exists and has files
    local file_count
    if [[ -d "$plugin_dir" ]]; then
        file_count=$(find "$plugin_dir" -type f 2>/dev/null | wc -l | tr -d ' ')
        echo "    - Files: $file_count"
    else
        echo "    - Directory not found"
    fi
}

# Validate environment
function validate_environment() {
    log_info "Validating environment..."

    # Check required commands
    require git command
    require python3 command || require python command

    # Check dotfiles location
    if [[ ! -d "$BASE_DIR/.git" ]]; then
        log_warn "Not a git repository, some features may not work"
    fi

    # Check dotbot installation
    if ! dotbot_validate; then
        log_error "Dotbot validation failed"
        return 1
    fi

    # Platform detection
    if is_macos; then
        log_info "Detected platform: macOS"
    elif is_linux; then
        log_info "Detected platform: Linux"
        if is_wsl; then
            log_info "Running in WSL environment"
        fi
    else
        log_warn "Unknown platform: $(uname -s)"
    fi

    log_info "Environment validation completed"
    return 0
}

# Run a single plugin (shared with install)
function run_plugin() {
    local plugin=$1
    local plugin_dir="plugins/$plugin"

    set_error_context "plugin:$plugin"

    if [[ ! -d "$plugin_dir" ]]; then
        log_error "Plugin directory not found: $plugin_dir"
        return 1
    fi

    log_info "Processing plugin: $plugin"

    pushd "$plugin_dir" > /dev/null || {
        log_error "Failed to enter plugin directory: $plugin_dir"
        return 1
    }

    local success=true

    # Run setup.sh if it exists
    if [[ -f setup.sh ]]; then
        if run_task "Running $plugin setup.sh" bash setup.sh; then
            log_debug "Setup script completed for $plugin"
        else
            log_error "Setup script failed for $plugin"
            success=false
        fi
    fi

    # Run dotbot config if it exists
    if [[ -f setup.dotbot ]]; then
        if run_task "Running $plugin dotbot config" "$DOTBOT_BIN" -c setup.dotbot; then
            log_debug "Dotbot config completed for $plugin"
        else
            log_error "Dotbot config failed for $plugin"
            success=false
        fi
    fi

    # Check if plugin has any files to process
    if [[ ! -f setup.sh && ! -f setup.dotbot ]]; then
        log_warn "Plugin $plugin has no setup.sh or setup.dotbot file"
    fi

    popd > /dev/null
    clear_error_context

    if [[ "$success" == true ]]; then
        log_info "Plugin completed successfully: $plugin"
        return 0
    else
        log_error "Plugin failed: $plugin"
        return 1
    fi
}

# Uninstall a single plugin
function uninstall_plugin() {
    local plugin=$1
    local plugin_dir="plugins/$plugin"
    local dry_run="${DOTFILES_DRY_RUN:-false}"

    set_error_context "plugin:$plugin"

    if [[ ! -d "$plugin_dir" ]]; then
        log_warn "Plugin directory not found: $plugin_dir (already uninstalled?)"
        return 0
    fi

    log_info "Uninstalling plugin: $plugin"

    pushd "$plugin_dir" > /dev/null || {
        log_error "Failed to enter plugin directory: $plugin_dir"
        return 1
    }

    local success=true

    # Check what type of plugin this is and handle accordingly
    if [[ -f uninstall.sh ]]; then
        # Plugin has a custom uninstall script - use it
        if run_task "Running $plugin uninstall.sh" bash uninstall.sh; then
            log_debug "Uninstall script completed for $plugin"
        else
            log_error "Uninstall script failed for $plugin"
            success=false
        fi
    elif [[ -f setup.dotbot ]]; then
        # Plugin uses dotbot configuration - reverse it automatically
        log_info "Reversing dotbot configuration for $plugin"
        # We need to call this from the base directory, not from within the plugin dir
        popd > /dev/null
        if uninstall_dotbot_plugin "$plugin" "$plugin_dir" "$dry_run"; then
            log_debug "Dotbot uninstall completed for $plugin"
        else
            log_error "Dotbot uninstall failed for $plugin"
            success=false
        fi
        pushd "$plugin_dir" > /dev/null
    elif [[ -f setup.sh ]]; then
        # Plugin has setup.sh but no uninstall.sh
        log_warn "Plugin $plugin has setup.sh but no uninstall.sh"
        log_warn "Manual cleanup may be required for $plugin"
        log_info "Consider creating an uninstall.sh script for this plugin"
        
        # For now, we'll consider this a success but warn the user
        log_warn "Plugin $plugin marked as uninstalled, but manual cleanup may be needed"
    else
        # No setup files found
        log_warn "No setup files found for plugin: $plugin"
        log_info "Plugin $plugin appears to be already clean or improperly configured"
    fi

    popd > /dev/null
    clear_error_context

    if [[ "$success" == true ]]; then
        log_info "Plugin uninstalled successfully: $plugin"
        return 0
    else
        log_error "Plugin uninstall failed: $plugin"
        return 1
    fi
}

# Generate installation report (shared with install)
function generate_report() {
    local report_file="${BASE_DIR}/logs/last-install-report.txt"
    safe_mkdir "$(dirname "$report_file")"

    cat > "$report_file" << EOF
Dotfiles Installation Report
===========================
Date: $(date)
Platform: $(uname -s) $(uname -m)
User: $USER
Home: $HOME
Base Directory: $BASE_DIR

Configuration:
- Debug mode: $DOTFILES_DEBUG
- Strict mode: $DOTFILES_STRICT
- Fail-fast: $DOTFILES_FAIL_FAST

Results:
- Total plugins: ${#DOTFILES_PLUGINS[@]}
- Successful: $PROGRESS_SUCCESS
- Failed: $PROGRESS_FAILED
- Error count: $(get_error_count)

Plugins processed:
$(printf "  %s\n" "${DOTFILES_PLUGINS[@]}")

Log file: $(get_log_file)

EOF

    if [[ $(get_error_count) -gt 0 ]]; then
        echo "Error details:" >> "$report_file"
        get_error_stack >> "$report_file"
    fi

    log_info "Installation report generated: $report_file"
}

# Main execution
function main() {
    # Check if no arguments provided
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi

    # Parse global arguments first
    local remaining_args=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug|--strict|--fail-fast|--quiet)
                parse_global_args "$1"
                shift
                ;;
            --verbose)
                # Let commands handle their own verbose flag
                remaining_args+=("$1")
                shift
                ;;
            *)
                remaining_args+=("$1")
                shift
                ;;
        esac
    done

    # Get command
    local command="${remaining_args[0]}"
    local command_args=("${remaining_args[@]:1}")

    # Log startup information
    log_info "Dotfiles command started: $command"
    log_info "OS: $(uname -s) $(uname -r)"
    log_info "User: $USER"
    log_info "Home: $HOME"
    log_info "Shell: $SHELL"
    log_info "Working directory: $PWD"

    # Execute command
    case $command in
        init)
            cmd_init "${command_args[@]}"
            ;;
        install)
            cmd_install "${command_args[@]}"
            ;;
        uninstall)
            cmd_uninstall "${command_args[@]}"
            ;;
        status)
            cmd_status "${command_args[@]}"
            ;;
        help)
            if [[ ${#command_args[@]} -gt 0 ]]; then
                show_command_help "${command_args[0]}"
            else
                show_help
            fi
            ;;
        *)
            echo "Unknown command: $command"
            echo "Use './dotfiles help' for available commands"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
